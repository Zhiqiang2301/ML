# -*- coding: utf-8 -*-
"""softmax.ipynb

# cổng xor

  Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-_D7rJxH-2lTx1K0pAuMTofELTU4KfHV
"""

import numpy as np
#softmax
def softmax(x):
    e_x = np.exp(x - np.max(x))
    return e_x / e_x.sum()
#sigmoid
def f(x): 
  return 1 / (1 + np.exp(-x))
def f_derivative(x):
  return f(x) * (1 - f(x))

np.random.seed(1) # Để kết quả mọi lần chạy giống nhau
w_10_1 = np.random.normal(0, 1)
w_11_1 = np.random.normal(0, 1)
w_12_1 = np.random.normal(0, 1)

w_20_1 = np.random.normal(0, 1)
w_21_1 = np.random.normal(0, 1)
w_22_1 = np.random.normal(0, 1)

w_10_2 = np.random.normal(0, 1)
w_11_2 = np.random.normal(0, 1)
w_12_2 = np.random.normal(0, 1)

w_20_2 = np.random.normal(0, 1)
w_21_2 = np.random.normal(0, 1)
w_22_2 = np.random.normal(0, 1)

N = 4
x_1 = [0, 0, 1, 1]
x_2 = [0, 1, 0, 1]
y_0 = [1, 0, 0, 1] # khi output = 0
y_1 = [0, 1, 1, 0] # khi output = 1
mu = 5e-2
epochs = 50000
for _ in range(epochs):
  dw_10_1 = 0
  dw_11_1 = 0
  dw_12_1 = 0

  dw_20_1 = 0
  dw_21_1 = 0
  dw_22_1 = 0

  dw_10_2 = 0
  dw_11_2 = 0
  dw_12_2 = 0

  dw_20_2 = 0
  dw_21_2 = 0
  dw_22_2 = 0

for i in range(N):
  #forward
  v_1_1 = w_10_1 + w_11_1 * x_1[i] + w_12_1 * x_2[i]
  v_2_1 = w_20_1 + w_21_1 * x_1[i] + w_22_1 * x_2[i]
  print("v1_1: ",v_1_1)
  print("x1: ",x_1[i])
  print("x2: ",x_2[i])
  print()
  y_1_1 = f(v_1_1)
  y_2_1 = f(v_2_1)
  print("sigmoid 1-1 2-1: ", y_1_1, y_2_1)
  v_1_2 = w_10_2 + w_11_2 * y_1_1 + w_12_2 * y_2_1
  v_2_2 = w_20_2 + w_21_2 * y_1_1 + w_22_2 * y_2_1 
  print("v1-2 v2-2: ",v_1_2,v_2_2)
   
  array_v = np.array([v_1_2,v_2_2])
  print("array_v  : ",array_v)
  softmax_array = softmax(array_v)
  print("softmax :" , softmax_array)
  y_1_2 = softmax_array[0]
  y_2_2 = softmax_array[1]
  print("array_v shape : ",array_v.shape)
  
  #backward
  delta_1_2 = (y_1_2 - y_0[i]) * f_derivative(v_1_2)
  delta_2_2 = (y_2_2 - y_1[i]) * f_derivative(v_2_2)

  delta_1_1 = (delta_1_2 * w_11_2 + delta_2_2 * w_12_2) 
  delta_2_1 = (delta_2_2 * w_22_2 + delta_1_2 * w_21_2) 

  dw_10_2 += delta_1_2
  dw_11_2 += delta_1_2 * y_1_1
  dw_12_2 += delta_1_2 * y_2_1

  dw_20_2 = delta_2_2
  dw_21_2 = delta_2_2 * y_1_1
  dw_22_2 = delta_2_2 * y_2_1

  dw_10_1 += delta_1_1
  dw_11_1 += delta_1_1 * x_1[i]
  dw_12_1 += delta_1_1 * x_2[i]

  dw_20_1 += delta_2_1
  dw_21_1 += delta_2_1 * x_1[i]
  dw_22_1 += delta_2_1 * x_2[i]

w_10_2 += -mu * dw_10_2
w_11_2 += -mu * dw_11_2
w_12_2 += -mu * dw_12_2

w_20_2 += -mu * dw_20_2
w_21_2 += -mu * dw_21_2
w_22_2 += -mu * dw_22_2

w_10_1 += -mu * dw_10_1
w_11_1 += -mu * dw_11_1
w_12_1 += -mu * dw_12_1

w_20_1 += -mu * dw_20_1
w_21_1 += -mu * dw_21_1
w_22_1 += -mu * dw_22_1

for i in range(N):
  v_1_1 = w_10_1 + w_11_1 * x_1[i] + w_12_1 * x_2[i]
  v_2_1 = w_20_1 + w_21_1 * x_1[i] + w_22_1 * x_2[i]
  
  y_1_1 = f(v_1_1)
  y_2_1 = f(v_2_1)
  
  v_1_2 = w_10_2 + w_11_2 * y_1_1 + w_12_2 * y_2_1
  v_2_2 = w_20_2 + w_21_2 * y_1_1 + w_22_2 * y_2_1 

   
  array_v = np.array([v_1_2,v_2_2])
 
  softmax_array = softmax(array_v)

  y_1_2 = softmax_array[0]
  y_2_2 = softmax_array[1]
 

  print(x_1[i], x_2[i], y_1_2, y_2_2)